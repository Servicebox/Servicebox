// components/ServicePricePage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ServicePricePage.css';
import { motion } from 'framer-motion';

const ServicePricePage = () => {
    const [services, setServices] = useState([]);
    const [filteredServices, setFilteredServices] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('–í—Å–µ');
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);

    // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
    const categoryDisplayData = {
        '–ù–æ—É—Ç–±—É–∫': { name: '–ù–æ—É—Ç–±—É–∫–∏', icon: 'üíª' },
        '–ú–æ–Ω–æ–±–ª–æ–∫': { name: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –º–æ–Ω–æ–±–ª–æ–∫–∏', icon: 'üñ•Ô∏è' },
        '–ê–ø–ø–ª': { name: 'Apple —Ç–µ—Ö–Ω–∏–∫–∞', icon: 'üçé' },
        '–¢–µ–ª–µ—Ñ–æ–Ω': { name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã', icon: 'üì±' },
        '–ü–ª–∞–Ω—à–µ—Ç—ã': { name: '–ü–ª–∞–Ω—à–µ—Ç—ã', icon: 'üì±' },
        '–¢–µ–ª–µ–≤–∏–∑–æ—Ä': { name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã', icon: 'üì∫' },
        '–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞': { name: '–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞', icon: 'üîç' },
        '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã': { name: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', icon: 'üéÆ' },
        '–î—Ä—É–≥–∏–µ': { name: '–î—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', icon: 'üîå' }
    };

    useEffect(() => {
        const fetchServices = async () => {
            try {
                const response = await axios.get('https://servicebox35.pp.ru/services');
                // –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ª—É–≥–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                const validServices = response.data.filter(service =>
                    service.serviceName && service.description
                );

                setServices(validServices);
                setFilteredServices(validServices);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const uniqueCategories = [...new Set(validServices.map(s => s.category))];
                setCategories(['–í—Å–µ', ...uniqueCategories]);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching services:', error);
                setLoading(false);
            }
        };

        fetchServices();
    }, []);

    useEffect(() => {
        let result = services;

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (selectedCategory !== '–í—Å–µ') {
            result = result.filter(service =>
                service.category === selectedCategory
            );
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined)
        if (searchQuery) {
            const query = searchQuery.toLowerCase();
            result = result.filter(service => {
                const name = service.serviceName?.toLowerCase() || '';
                const desc = service.description?.toLowerCase() || '';
                return name.includes(query) || desc.includes(query);
            });
        }

        setFilteredServices(result);
    }, [searchQuery, selectedCategory, services]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–∞ —Ä—É–±–ª—è
    const formatPrice = (price) => {
        if (!price) return '';
        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫ —Ä—É–±–ª—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (price.includes('‚ÇΩ') || price.includes('—Ä—É–±')) return price;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ —Ä—É–±–ª—è –∫ —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        return `${price} ‚ÇΩ`;
    };

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const container = {
        hidden: { opacity: 0 },
        show: {
            opacity: 1,
            transition: {
                staggerChildren: 0.1
            }
        }
    };

    const item = {
        hidden: { opacity: 0, y: 20 },
        show: { opacity: 1, y: 0 }
    };

    if (loading) {
        return (
            <motion.div
                className="service-price-page"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
            >
                <div className="loading-container">
                    <div className="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏...</p>
                </div>
            </motion.div>
        );
    }

    return (
        <motion.div
            className="service-price-page"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.5 }}
        >
            <div className="price-header">
                <motion.h1
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.1 }}
                >
                    –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
                </motion.h1>
                <motion.p
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.2 }}
                >
                    –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                </motion.p>
            </div>

            <div className="controls-container">
                <motion.div
                    className="search-container"
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.3 }}
                >
                    <input
                        type="text"
                        placeholder="üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                    />
                </motion.div>

                <motion.div
                    className="category-filter"
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.4 }}
                >
                    {categories.map(category => (
                        <motion.button
                            key={category}
                            className={`category-btn ${selectedCategory === category ? 'active' : ''}`}
                            onClick={() => setSelectedCategory(category)}
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                        >
                            {category === '–í—Å–µ' ? '–í—Å–µ' : (
                                <>
                                    <span className="category-icon">{categoryDisplayData[category]?.icon || 'üìã'}</span>
                                    {categoryDisplayData[category]?.name || category}
                                </>
                            )}
                        </motion.button>
                    ))}
                </motion.div>
            </div>

            {filteredServices.length === 0 ? (
                <motion.div
                    className="no-results"
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                >
                    <h3>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
                </motion.div>
            ) : (
                <motion.div
                    className="services-grid"
                    variants={container}
                    initial="hidden"
                    animate="show"
                >
                    {filteredServices.map(service => (
                        <motion.div
                            key={service._id}
                            className="service-card"
                            variants={item}
                            whileHover={{ y: -5, boxShadow: '0 10px 25px rgba(0,0,0,0.15)' }}
                        >
                            <div className="card-header">
                                <h3>{service.serviceName}</h3>
                                <span className="price-tag">{formatPrice(service.price)}</span>
                            </div>
                            <div className="card-body">
                                <p className="description">{service.description}</p>
                                <div className="category-badge">
                                    {categoryDisplayData[service.category]?.icon || 'üìã'}
                                    {categoryDisplayData[service.category]?.name || service.category}
                                </div>
                            </div>
                        </motion.div>
                    ))}
                </motion.div>
            )}
        </motion.div>
    );
};

export default ServicePricePage;